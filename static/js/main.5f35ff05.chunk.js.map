{"version":3,"sources":["components/bomb.svg","components/flag.svg","components/Cell.tsx","components/Board.tsx","components/Col.tsx","components/Row.tsx","components/NeuButton.tsx","components/Actions.tsx","components/Modal.tsx","components/Timer.tsx","components/useModal.ts","core/Minesweeper.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","bomb","require","flag","CellContainer","styled","button","children","css","Bomb","img","Flag","Cell","onClick","onContextMenu","event","src","Container","div","Board","NeuButton","Actions","startGame","style","color","Backdrop","Text","p","Card","Modal","isShowing","hide","state","ReactDOM","createPortal","Fragment","document","body","FloatingTimer","Timer","React","useState","currentTime","setCurrentTime","start","useEffect","timer","setInterval","clearInterval","useModal","setIsShowing","toggle","Minesweeper","level","board","solutionBoard","rows","columns","bombs","eventQueue","movement","gameState","levelRatios","easy","medium","hard","this","Math","round","new","initializeEmptyBoard","dispatchEvent","params","newBoard","x","push","y","map","r","getCoordsWithBombs","forEach","xAxis","yAxis","executeSolution","solutionBoardValue","gameOver","revealZeros","boardClone","checkWin","bombCount","result","randomXCoord","getRandomCoord","randomYCoord","find","res","min","max","floor","random","generateBoard","updateBoard","tempBoard","hidden","flat","filter","v","length","console","log","type","callback","MainContent","App","minesweeper","getBoard","setBoard","getGameState","setGameState","addEventListener","info","gameParameters","localStorage","getItem","restoreGameParameters","JSON","parse","setItem","stringify","getCurrentGameParameters","Row","col","xIdx","Col","key","el","yIdx","revealCell","preventDefault","placeFlag","Boolean","window","location","hostname","match","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5f35ff05.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bomb.a4e4175d.svg\";","module.exports = __webpack_public_path__ + \"static/media/flag.e8649cc6.svg\";","import React from \"react\";\nimport styled, { css } from \"styled-components\";\nconst bomb = require(\"./bomb.svg\") as string;\nconst flag = require(\"./flag.svg\") as string;\n\ninterface Props {\n  children: any;\n  onClick: (event: React.MouseEvent) => void;\n  onContextMenu: (event: React.MouseEvent) => void;\n}\n\nconst CellContainer = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: bold;\n  color: white;\n  border-radius: 10px;\n  background: #e5e4ec;\n  box-shadow: 5px 5px 20px #c3c2c9, -5px -5px 20px #ffffff;\n  margin: 8px;\n  width: 50px;\n  height: 50px;\n  border: none;\n  outline: none;\n  font-size: 1.6rem;\n  &:hover {\n    cursor: pointer;\n  }\n\n  ${({ children }) => {\n    switch (children) {\n      case 0:\n        return css`\n          background: linear-gradient(145deg, #cecdd4, #f5f4fd);\n          color: transparent;\n        `;\n      case 1:\n        return css`\n          background: linear-gradient(145deg, #cecdd4, #f5f4fd);\n          color: #4444ee;\n        `;\n      case 2:\n        return css`\n          background: linear-gradient(145deg, #cecdd4, #f5f4fd);\n          color: #4bde81;\n        `;\n      case 3:\n        return css`\n          background: linear-gradient(145deg, #cecdd4, #f5f4fd);\n          color: #b52727;\n        `;\n      case 4:\n        return css`\n          background: linear-gradient(145deg, #cecdd4, #f5f4fd);\n          color: #de9c4b;\n        `;\n      case 5:\n        return css`\n          background: linear-gradient(145deg, #cecdd4, #f5f4fd);\n          color: #ff8787;\n        `;\n      case 6:\n        return css`\n          background: linear-gradient(145deg, #cecdd4, #f5f4fd);\n          color: #de4bab;\n        `;\n      case 7:\n        return css`\n          background: linear-gradient(145deg, #cecdd4, #f5f4fd);\n          color: #a34bde;\n        `;\n      case 8:\n        return css`\n          background: linear-gradient(145deg, #cecdd4, #f5f4fd);\n          color: #5d2d8c;\n        `;\n      case 9:\n        return css`\n          background: linear-gradient(145deg, #cecdd4, #f5f4fd);\n          color: #6e2020;\n        `;\n      case 10:\n        return css`\n          background: linear-gradient(145deg, #cecdd4, #f5f4fd);\n          color: #64de4b;\n        `;\n    }\n  }}\n`;\n\nconst Bomb = styled.img`\n  width: 1.2rem;\n  height: 1.2rem;\n`;\n\nconst Flag = styled.img`\n  width: 1.6rem;\n  height: 1.6rem;\n`;\n\nfunction Cell({ children, onClick, onContextMenu }: Props) {\n  function handleClick(event: React.MouseEvent) {\n    onClick(event);\n  }\n\n  function handleContextClick(event: React.MouseEvent) {\n    onContextMenu(event);\n  }\n\n  return (\n    <CellContainer onClick={handleClick} onContextMenu={handleContextClick}>\n      {children === 10 ? (\n        <Bomb src={bomb} />\n      ) : children === 99 ? (\n        <Flag src={flag} />\n      ) : (\n        children\n      )}\n    </CellContainer>\n  );\n}\n\nexport default Cell;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface Props {\n  children: React.ReactChild | React.ReactChild[] | undefined;\n}\n\nconst Container = styled.div`\n  padding: 3rem 0;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nfunction Board({ children }: Props) {\n  return <Container>{children}</Container>;\n}\n\nexport default Board;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n","import styled from \"styled-components\";\n\n/**\n * Neumorphism-based button\n */\nconst NeuButton = styled.button`\n  border-radius: 0.4rem;\n  background: #e5e4ec;\n  box-shadow: 5px 5px 10px #c3c2c9, -5px -5px 10px #ffffff;\n  border: none;\n  padding: 0.6rem 1.5rem;\n  outline: none;\n  margin: 0 0.6rem;\n  font-weight: bold;\n  &:hover {\n    cursor: pointer;\n  }\n\n  &:active {\n    background: linear-gradient(145deg, #cecdd4, #f5f4fd);\n  }\n`;\n\nexport default NeuButton;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport NeuButton from \"./NeuButton\";\n\ninterface Props {\n  startGame: () => void;\n}\n\nconst Container = styled.div``;\n\nfunction Actions({ startGame }: Props) {\n  return (\n    <Container>\n      <NeuButton style={{ color: \"#4444ee\" }} onClick={startGame}>\n        New Game\n      </NeuButton>\n    </Container>\n  );\n}\n\nexport default Actions;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styled from \"styled-components\";\nimport { GameState } from \"../core/Minesweeper\";\nimport NeuButton from \"./NeuButton\";\n\ninterface Props {\n  isShowing: boolean;\n  hide: () => void;\n  state: GameState | undefined;\n}\n\nconst Backdrop = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: rgba(0, 0, 0, 0.36);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Text = styled.p`\n  opacity: 0.7;\n  color: #de4bab;\n  font-weight: bold;\n`;\n\nconst Card = styled.div`\n  min-width: 300px;\n  min-height: 150px;\n  padding: 1rem;\n  background: #e5e4ec;\n  border-radius: 6px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n`;\n\nconst Modal = ({ isShowing, hide, state }: Props) =>\n  isShowing\n    ? ReactDOM.createPortal(\n        <React.Fragment>\n          <Backdrop>\n            <Card>\n              {state === \"lost\" && (\n                <Text>\n                  You lost 😢 Click <i>New Game</i> to try again\n                </Text>\n              )}\n              {state === \"won\" && <Text>You won! 🎉🙌</Text>}\n\n              <NeuButton style={{ color: \"#4444ee\" }} onClick={hide}>\n                Dismiss\n              </NeuButton>\n            </Card>\n          </Backdrop>\n        </React.Fragment>,\n        document.body\n      )\n    : null;\n\nexport default Modal;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport NeuButton from \"./NeuButton\";\n\nconst FloatingTimer = styled(NeuButton)`\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  color: #a34bde;\n`;\n\nfunction Timer() {\n  const [currentTime, setCurrentTime] = React.useState<number>(0);\n  const [start] = React.useState<boolean>(true);\n\n  React.useEffect(() => {\n    if (start) {\n      const timer = setInterval(() => {\n        setCurrentTime(currentTime + 1);\n      }, 1000);\n\n      return () => clearInterval(timer);\n    }\n  }, [currentTime]);\n\n  return (\n    <>{currentTime > 0 ? <FloatingTimer>{currentTime}</FloatingTimer> : null}</>\n  );\n}\n\nexport default Timer;\n","import { useState } from \"react\";\n\nconst useModal = () => {\n  const [isShowing, setIsShowing] = useState(false);\n\n  function toggle() {\n    setIsShowing(!isShowing);\n  }\n\n  return {\n    isShowing,\n    toggle,\n  };\n};\n\nexport default useModal;\n","export type Level = \"easy\" | \"medium\" | \"hard\";\nexport type Board = Array<Cell[]>;\nexport type Cell = number | null;\nexport type EventQueue = {\n  movement: Array<EventHandler>;\n  state: Array<EventHandler>;\n};\nexport type GameState = \"new\" | \"active\" | \"won\" | \"lost\";\nexport type GameEvent = \"movement\" | \"state\";\nexport type EventHandler = (event: any) => void;\nexport type GameParameters = {\n  level: Level;\n  board: Board;\n  solutionBoard: Board;\n  state: GameState;\n};\n\nclass Minesweeper {\n  private board: Board = [];\n  private solutionBoard: Board = [];\n  private rows: number;\n  private columns: number;\n  private bombs: number;\n  private eventQueue: EventQueue = {\n    movement: [],\n    state: [],\n  };\n  private gameState: GameState = \"new\";\n\n  constructor(private level: Level = \"easy\") {\n    const levelRatios = {\n      easy: 0.07,\n      medium: 0.15,\n      hard: 0.35,\n    };\n\n    this.columns = Math.round(8 ** levelRatios[this.level] * 2) + 4; // x axis\n    this.rows = Math.round(8 ** levelRatios[this.level] * 2) + 4; // y axis\n    this.bombs = Math.round(this.columns ** 2 * levelRatios[this.level]) + 1;\n\n    this.new();\n  }\n\n  /**\n   * Create a new instance of the game and start a new board\n   */\n  public new(): void {\n    this.gameState = \"new\";\n    this.initializeEmptyBoard();\n    this.dispatchEvent(\"movement\");\n    this.dispatchEvent(\"state\");\n  }\n\n  /**\n   * Saves the current state of the board with a timestamp\n   *\n   * @returns Promise<void>\n   */\n  public save() {}\n\n  /**\n   * Loads an existing state of a board\n   *\n   * @returns Promise<void>\n   */\n  public load() {}\n\n  /**\n   * Return the current game parameters\n   */\n  public getCurrentGameParameters(): GameParameters {\n    return {\n      state: this.gameState,\n      board: this.board,\n      solutionBoard: this.solutionBoard,\n      level: this.level,\n    };\n  }\n\n  /**\n   * Restore game parameters stored in localStorage or coming from the API\n   * @param params GameParameters\n   */\n  public restoreGameParameters(params: GameParameters): void {\n    const { board, level, solutionBoard, state } = params;\n\n    this.board = board;\n    this.level = level;\n    this.solutionBoard = solutionBoard;\n    this.gameState = state;\n  }\n\n  /**\n   * X, Y generated grid\n   */\n  public getBoard(): Board {\n    return this.board;\n  }\n\n  /**\n   * Retuns the current gameState\n   */\n  public getGameState(): GameState {\n    return this.gameState;\n  }\n\n  /**\n   * Finish the game\n   *\n   * @returns Board\n   */\n  private gameOver(): Board {\n    this.gameState = \"lost\";\n\n    this.board = this.solutionBoard;\n    this.dispatchEvent(\"movement\");\n    this.dispatchEvent(\"state\");\n    return this.board;\n  }\n\n  public initializeEmptyBoard(): Board {\n    const newBoard: Board = [];\n\n    for (let x = 0; x < this.columns; x++) {\n      newBoard.push([]);\n      for (let y = 0; y < this.rows; y++) {\n        newBoard![x][y] = null;\n      }\n    }\n\n    // Clone newBoard value instead of assigning to avoid referencing the same value.\n    this.board = [...newBoard.map((r) => [...r])];\n    this.solutionBoard = [...newBoard.map((r) => [...r])];\n\n    return this.board;\n  }\n\n  /**\n   * Generate a new board\n   *\n   * @returns Board\n   */\n  private generateBoard(x: number, y: number): Board {\n    // Generate new board with bombs\n    this.gameState = \"active\";\n    this.dispatchEvent(\"state\");\n\n    const bombsCoords = this.getCoordsWithBombs();\n\n    bombsCoords.forEach(([x, y]) => {\n      this.solutionBoard[x][y] = 10;\n\n      // Iterate around the center of the currentPos and add +1 as a hint\n      for (let xAxis = x - 1; xAxis < x + 2; xAxis++) {\n        for (let yAxis = y - 1; yAxis < y + 2; yAxis++) {\n          // Calculate out-of-bounds to place hints\n          if (\n            xAxis !== -1 &&\n            yAxis !== -1 &&\n            xAxis < this.columns &&\n            yAxis < this.rows &&\n            this.solutionBoard[xAxis][yAxis] !== 10\n          ) {\n            this.solutionBoard[xAxis][yAxis]! += 1;\n          }\n        }\n      }\n    });\n\n    // Do first click reveal logic:\n    // Check where the user clicked and update solutionBoard accordingly.\n    // If the user clicked in a cell with zero value, reveal cells next to it.\n    // Otherwise, just reveal that cell.\n\n    return this.executeSolution(x, y);\n  }\n\n  /**\n   * Update the board based on the user's input\n   */\n  private updateBoard(x: number, y: number): Board {\n    // Start updating board on user input after first click\n    return this.executeSolution(x, y);\n  }\n\n  private executeSolution(x: number, y: number): Board {\n    const solutionBoardValue = this.solutionBoard[x][y];\n\n    if (solutionBoardValue === 10) {\n      return this.gameOver();\n    }\n\n    if (solutionBoardValue === null) {\n      // Reveal zeroes around it\n      return this.revealZeros(x, y);\n    }\n\n    const boardClone = [...this.board.map((r) => [...r])];\n    boardClone[x][y] = solutionBoardValue || 0;\n\n    this.board = boardClone;\n\n    this.checkWin();\n\n    this.dispatchEvent(\"movement\");\n\n    return this.board;\n  }\n\n  /**\n   * getCoordsWithBombs returns random X,Y positions per each bomb the board should have\n   *\n   * @returns Array<[number, number]>\n   */\n  private getCoordsWithBombs(): Array<[number, number]> {\n    let bombCount = this.bombs;\n    const result: Array<[number, number]> = [];\n\n    while (bombCount > 0) {\n      // Get a random [X, Y] position\n      const randomXCoord = this.getRandomCoord(0, this.columns - 1);\n      const randomYCoord = this.getRandomCoord(0, this.rows - 1);\n\n      if (\n        !result.find(\n          (res) => res[0] === randomXCoord && res[1] === randomYCoord\n        )\n      ) {\n        result.push([randomXCoord, randomYCoord]);\n        bombCount -= 1;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * getRandomCoord is a helper function that returns a random coordinate\n   * given min and max values. This function is used to randomly calculate\n   * where to place bombs.\n   */\n  private getRandomCoord(min: number, max: number): number {\n    let randomNumber = Math.floor(Math.random() * (max - min + 1) + min);\n    return randomNumber;\n  }\n\n  /**\n   * revealCell is triggered when a user clicks on a cell to reveal its contents.\n   * If the selected cell is flagged, cell should not be revealed.\n   * Should also evaluate if the user clicked on a field with a bomb and end the game.\n   *\n   * @param x X coordinate\n   * @param y Y coordinate\n   */\n  public revealCell(x: number, y: number) {\n    switch (this.gameState) {\n      case \"new\":\n        this.generateBoard(x, y);\n        break;\n      case \"active\":\n        this.updateBoard(x, y);\n        break;\n    }\n  }\n\n  /**\n   * placeFlag is triggered when a user decides to flag a cell.\n   * Flagged cells are not revealed when clicked again.\n   * A flagged cell can be unflagged.\n   *\n   * @param x\n   * @param y\n   */\n  public placeFlag(x: number, y: number) {\n    if (this.gameState === \"new\" || this.gameState === \"active\") {\n      const boardClone = [...this.board.map((r) => [...r])];\n\n      if (boardClone[x][y] === null) {\n        boardClone[x][y] = 99;\n      } else if (boardClone[x][y] === 99) {\n        boardClone[x][y] = null;\n      }\n\n      this.board = boardClone;\n\n      this.checkWin();\n\n      this.dispatchEvent(\"movement\");\n    }\n  }\n\n  /**\n   * Flood fill algorithm to determine whether to reveal a cell\n   * that is null (has no value) and adjacents cells.\n   * @param x\n   * @param y\n   */\n  private revealZeros(x: number, y: number, tempBoard?: Board): Board {\n    // Use flood fill algorithm\n    const boardClone = tempBoard || [...this.board.map((r) => [...r])];\n    boardClone[x][y] = 0;\n\n    // Iterate around the center of the currentPos\n    for (let xAxis = x - 1; xAxis < x + 2; xAxis++) {\n      for (let yAxis = y - 1; yAxis < y + 2; yAxis++) {\n        // Calculate out-of-bounds\n        if (\n          xAxis !== -1 &&\n          yAxis !== -1 &&\n          xAxis < this.columns &&\n          yAxis < this.rows &&\n          this.solutionBoard[xAxis][yAxis] !== 10\n        ) {\n          if (this.solutionBoard[xAxis][yAxis]! > 0) {\n            boardClone[xAxis][yAxis] = this.solutionBoard[xAxis][yAxis];\n          } else if (boardClone[xAxis][yAxis] === null) {\n            this.revealZeros(xAxis, yAxis, boardClone);\n          }\n        }\n      }\n    }\n\n    this.board = boardClone;\n\n    this.dispatchEvent(\"movement\");\n\n    return this.board;\n  }\n\n  private checkWin(): Board {\n    // Check if won by placing flags\n    const hidden = (this.board as any).flat(1).filter((v: any) => v === null)\n      .length;\n\n    console.log(this.board);\n    console.log(hidden);\n\n    if (hidden === this.bombs) {\n      this.board = this.solutionBoard;\n      this.dispatchEvent(\"movement\");\n      this.gameState = \"won\";\n      this.dispatchEvent(\"state\");\n    }\n\n    return this.board;\n  }\n\n  /**\n   * Register an event into the eventQueue\n   *\n   * @param event\n   */\n  public addEventListener(type: GameEvent, callback: EventHandler): void {\n    if (type === \"movement\") {\n      this.eventQueue.movement.push(callback);\n    }\n    if (type === \"state\") {\n      this.eventQueue.state.push(callback);\n    }\n  }\n\n  /**\n   * Dispatch an event from the eventQueue\n   *\n   * @param event\n   */\n  public dispatchEvent(type: GameEvent): void {\n    if (type === \"movement\") {\n      this.eventQueue.movement.forEach((callback) => callback(this.board));\n    } else if (type === \"state\") {\n      this.eventQueue.state.forEach((callback) => callback(this.gameState));\n    }\n  }\n}\n\nexport default Minesweeper;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Board, Cell, Col, Row } from \"./components\";\nimport Actions from \"./components/Actions\";\nimport Modal from \"./components/Modal\";\nimport Timer from \"./components/Timer\";\nimport useModal from \"./components/useModal\";\nimport Minesweeper, {\n  Board as BoardType,\n  Cell as CellType,\n  GameState,\n} from \"./core/Minesweeper\";\n\nconst MainContent = styled.div`\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: #e5e4ec;\n`;\n\nfunction App() {\n  const [minesweeper] = React.useState<Minesweeper>(new Minesweeper(\"medium\"));\n  const [board, setBoard] = React.useState<BoardType>(minesweeper.getBoard());\n  const [gameState, setGameState] = React.useState<GameState>(\n    minesweeper.getGameState()\n  );\n  const { isShowing, toggle } = useModal();\n\n  React.useEffect(() => {\n    minesweeper.addEventListener(\"movement\", setBoard);\n    minesweeper.addEventListener(\"state\", setGameState);\n    console.info(\n      `INSTRUCTIONS: Right click to reveal cell, left click to place a flag. Have fun!`\n    );\n\n    const gameParameters = localStorage.getItem(\"game_instance\");\n\n    if (gameParameters) {\n      console.log(\"Restoring game parameters\");\n      minesweeper.restoreGameParameters(JSON.parse(gameParameters));\n      setBoard(minesweeper.getBoard());\n    }\n  }, [minesweeper]);\n\n  React.useEffect(() => {\n    if (gameState === \"lost\" || gameState === \"won\") {\n      toggle();\n    }\n  }, [gameState]);\n\n  React.useEffect(() => {\n    localStorage.setItem(\n      \"game_instance\",\n      JSON.stringify(minesweeper.getCurrentGameParameters())\n    );\n  }, [board]);\n\n  function revealCell(x: number, y: number) {\n    minesweeper.revealCell(x, y);\n  }\n\n  function placeFlag(event: React.MouseEvent, x: number, y: number) {\n    event.preventDefault();\n    minesweeper.placeFlag(x, y);\n  }\n\n  function startNewGame() {\n    minesweeper.new();\n  }\n\n  return (\n    <MainContent>\n      {gameState === \"active\" && <Timer />}\n      <Actions startGame={startNewGame} />\n      <Board>\n        <Row>\n          {board?.map((col: any[], xIdx: number) => {\n            return (\n              <Col key={xIdx}>\n                {col.map((el: CellType, yIdx: number) => {\n                  return (\n                    <Cell\n                      key={yIdx}\n                      onClick={() => revealCell(xIdx, yIdx)}\n                      onContextMenu={(event) => placeFlag(event, xIdx, yIdx)}\n                    >\n                      {el}\n                    </Cell>\n                  );\n                })}\n              </Col>\n            );\n          })}\n        </Row>\n      </Board>\n      <Modal isShowing={isShowing} hide={toggle} state={gameState} />\n    </MainContent>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}